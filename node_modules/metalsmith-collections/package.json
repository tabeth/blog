{
  "_from": "metalsmith-collections",
  "_id": "metalsmith-collections@0.9.0",
  "_inBundle": false,
  "_integrity": "sha1-oNGTR6UdX70CaJnfwfTWivUODhc=",
  "_location": "/metalsmith-collections",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "metalsmith-collections",
    "fetchSpec": "latest",
    "name": "metalsmith-collections",
    "raw": "metalsmith-collections",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/metalsmith-collections/-/metalsmith-collections-0.9.0.tgz",
  "_shasum": "a0d19347a51d5fbd026899dfc1f4d68af50e0e17",
  "_shrinkwrap": null,
  "_spec": "metalsmith-collections",
  "_where": "/home/tabeth/static-site",
  "bugs": {
    "url": "https://github.com/segmentio/metalsmith-collections/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^2.2.0",
    "extend": "^3.0.0",
    "multimatch": "^2.1.0",
    "read-metadata": "^1.0.0",
    "uniq": "^1.0.1"
  },
  "deprecated": false,
  "description": "A Metalsmith plugin that adds collections of files to the global metadata.",
  "devDependencies": {
    "metalsmith": "2.x",
    "mocha": "^3.1.2"
  },
  "homepage": "https://github.com/segmentio/metalsmith-collections#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "name": "metalsmith-collections",
  "optionalDependencies": {},
  "readme": "# metalsmith-collections\n\nA [Metalsmith](https://github.com/segmentio/metalsmith) plugin that lets you group files together into an ordered collection, like blog posts. That way you can loop over them to generate an index, or add 'next' and 'previous' links between them.\n\n## Features\n\n  - can match files by `collection` metadata\n  - can match files by pattern\n  - can limit the number of files in a collection\n  - adds collections to global metadata\n  - adds `next` and `previous` references to each file in the collection\n\n## Installation\n\n    $ npm install metalsmith-collections\n\n## Usage\n\nThere are two ways to create collections:\n\n  - **by pattern** - this is just passing a globing pattern that will group any files that match into the same collection. The passed pattern can be a single pattern (as a string) or an array of globing patterns. For more information read the [multimatch patterns documentation](https://www.npmjs.com/package/multimatch#how-multiple-patterns-work).\n  - **by metadata** - this is adding a specific `collection` metadata field to each item that you want to add to a collection.\n\nThe simplest way to create a collection is to use a pattern to match the files you want to group together:\n\n```js\nvar collections = require('metalsmith-collections');\n\nmetalsmith.use(collections({\n  articles: '*.md'\n}));\n```\n\nWhich is just a shorthand. You could also add additional options:\n\n```js\nmetalsmith.use(collections({\n  articles: {\n    pattern: '*.md',\n    sortBy: 'date',\n    reverse: true\n  }\n}));\n```\n\nBut you can also match based on a `collection` property in each file's metadata by omitting a pattern, and adding the property to your files:\n\n```js\nmetalsmith.use(collections({\n  articles: {\n    sortBy: 'date',\n    reverse: true\n  }\n}));\n```\n```markdown\n---\ntitle: My Article\ncollection: articles\ndate: 2013-02-21\n---\n\nMy article contents...\n```\n\nAll of the files with a matching `collection` will be added to an array that is exposed as a key of the same name on the global Metalsmith `metadata`.\nYou can omit passing any options to the plugin when matching based on a `collection` property.\n\nAdds a `path` property to the collection item's data which contains the file path of the generated file. For example, this can be used in mustache templates to create links:\n\n```html\n<h1><a href=\"/{{ path }}\">{{ title }}</a></h1>\n```\n\n### Collection Metadata\n\nAdditional metadata can be added to the collection object.\n\n```js\nmetalsmith.use(collections({\n  articles: {\n    sortBy: 'date',\n    reverse: true,\n    metadata: {\n        name: 'Articles',\n        description: 'The Articles listed here...'\n    }\n  }\n}));\n```\n\nCollection metadata can also be assigned from a `json` or `yaml` file.\n\n```js\nmetalsmith.use(collections({\n  articles: {\n    sortBy: 'date',\n    reverse: true,\n    metadata: 'path/to/file.json'\n  }\n}));\n```\n\nOn each collection definition, it's possible to add a `limit` option so that the\ncollection length is not higher than the given limit:\n\n```js\nmetalsmith.use(collections({\n  lastArticles: {\n    sortBy: 'date',\n    limit: 10\n  }\n}));\n```\n\nBy adding `refer: false` to your options, it will skip adding the \"next\" and\n\"previous\" links to your articles.\n\n```js\nmetalsmith.use(collections({\n  articles: {\n    refer: false\n  }\n}));\n```\n\n\n## CLI Usage\n\nAll of the same options apply, just add them to the `\"plugins\"` key in your `metalsmith.json` configuration:\n\n```json\n{\n  \"plugins\": {\n    \"metalsmith-collections\": {\n      \"articles\": {\n        \"sortBy\": \"date\",\n        \"reverse\": true\n      }\n    }\n  }\n}\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/segmentio/metalsmith-collections.git"
  },
  "scripts": {
    "pretest": "npm install --silent --progress=false",
    "test": "mocha --reporter spec"
  },
  "version": "0.9.0"
}
